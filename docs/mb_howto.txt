
                       MusicBrainz Client Library HOWTO
                       --------------------------------

Introduction:
-------------

The MusicBrainz client library serves as a tool to allow developers to 
integrate MusicBrainz searches and metadata exchange functionality into
their applications. 

The client library includes the following features:

  - Lookup Audio CD metadata using CD Index diskids
  - calculate Relatable TRM acoustic fingerprints
  - Search for artist/album/track titles
  - Lookup metadata by name, TRM ids or MusicBrainz Ids

The client library is released under the LGPL, which means that even 
developers of closed source applications can use the client library, 
without having to open source their own code.

Overview:
---------

MusicBrainz provides a powerful web service API that uses RDF for
expressing queries and query responses. RDF is the Resource Description
Framework as specified by World Wide Web Consortium, and it can be used
for formally expressing metadata using an XML syntax.

RDF is powerful, but also complex, and thus the client library attempts
to shield the end user from having to understand RDF. But in order to
understand the Query/Select/Get interface that client library has, a
brief overview of the data query process is in order.

To query the MusicBrainz server, the user must pass an RDF query to the
server. You may decide to create your own queries if you are comfortable
with RDF, or you can use the predefined queries in the client library.
The predefined queries will require a number of arguments that will get
substituted into the query before the query is sent to the server.

The mb_Query (MusicBrainz::Query in C++) function takes a query string
and a number of other arguments that get substituted into the query.
The queries are defined in queries.h, and you do not need to really
know what the actual query strings mean -- all you need to do is to
select the right query for your purpose and then provide the query
function with the right arguments and the client library will do the rest.

Once the query function returns it will have retrieved the RDF response
from the server. The returned RDF will get parsed and then the user
can use the Select/Get/Data functions to extract information from the
query result.

The RDF response will typically return a whole bunch of information, and
you may only be interested in some of that information. In order to make
the data extraction process reasonably easy, the user will need to Select
a context (think of it as a subset) of the RDF response. You can then
extract pieces of data from that context.

For example, if you look up a CD using the client library, you will get
back a list of albums. Each MusicBrainz query will return a list of
one kind or another, even if it only contains one item. So, you will need
to select an album from the list, and in this case it will be the first
album in the list. You'll do that with a call to Select. After calling
Select, you can call the GetResultData or GetResultInt functions to extract
string or integer values from the returned data. A code fragment to
do this in C would look like:

     [example code fragment here]

Finally, a couple of other tidbits for the overview: The client library 
uses standard HTTP GET and POST queries to accomplish the communication 
with the server. Thus, the client library has support for using proxies to 
get across firewalls, and no special firewall arrangements have to be made.

The data that is extracted from the RDF response can either be in standard
ISO-8859-1 format (the character encoding that Western European and US 
computers use) or in the UTF-8 format. However, at this point in time,
the MusicBrainz server does not actually support UTF-8 data (we need to
find an opensource database that _completely_ supports UTF-8 first). The
server only supports ISO 8859-1 right now.  

The MusicBrainz client library can also be used to create Relatable TRM 
acoustic fingerprints for audio files. In order to generate a TRM id, you
will need to feed the client library the first 30 seconds worth of PCM
data from your audio stream. Once you've fed it the 30 seconds of data,
the client library will send the acousting fingerprint information to the
Relatable server and the server will assign and return a TRM ID to the given
song. You can then use the TRM id to look up metadata for the song,
and fill out the ID3 tags (or equivalent) automatically! 

Topics to cover:
----------------
- Functions
- Queries
- Proxies
- MBIDs and get id function
- Creating TRM ids
